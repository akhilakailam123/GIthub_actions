name: Password Update Workflow

on:
  workflow_dispatch:
    inputs:
      user_name:
        description: 'Enter username'
        required: true
      environment:
        description: 'Select environment (prod/INT)'
        required: true
        default: 'int'
        options:
          - prod
          - int

permissions:
  contents: write

jobs:
  update-password:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Display Inputs
        run: |
          echo "Username: ${{ github.event.inputs.user_name }}"
          echo "Environment: ${{ github.event.inputs.environment }}"

      - name: Simulate Password Encryption
        id: encrypt_password
        run: |
          echo "Simulating password encryption for ${{ github.event.inputs.user_name }}..."
          
          # Generate AES encrypted password
          aes_encrypted_password=$(echo "password" | openssl enc -aes-256-cbc -a -salt -pass pass:mysecretpass)
          echo "AES Encrypted password: $aes_encrypted_password"
          
          # Generate RSA encrypted password
          rsa_encrypted_password=$(echo "password" | openssl rsautl -encrypt -pubin -inkey public_key.pem | base64)
          echo "RSA Encrypted password: $rsa_encrypted_password"
          
          echo "aes_encrypted_password=$aes_encrypted_password" >> $GITHUB_OUTPUT
          echo "rsa_encrypted_password=$rsa_encrypted_password" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update Password for User in XML Files
        run: |
          username="${{ github.event.inputs.user_name }}"
          env="${{ github.event.inputs.environment }}"
          aes_encrypted_password="${{ steps.encrypt_password.outputs.aes_encrypted_password }}"
          rsa_encrypted_password="${{ steps.encrypt_password.outputs.rsa_encrypted_password }}"

          for cluster_dir in apisec invex; do
            xml_file="$cluster_dir/$env.xml"
            if [ -f "$xml_file" ]; then
              echo "Processing $xml_file for user $username"

              # Extract the current encryption method from the password attribute
              encryptionMethod=$(grep -oP "(?<=<alias name=\"aliasPw${username}\" password=\"{)[^:]+(?=:)" "$xml_file")

              if [[ $encryptionMethod == "AES" ]]; then
                echo "Detected AES encryption method"
                sed -i "/<alias name=\"aliasPw${username}\"/s|password=\"[^\"]*\"|password=\"{AES:${aes_encrypted_password}}\"|" "$xml_file"
              elif [[ $encryptionMethod == "RSA" ]]; then
                echo "Detected RSA encryption method"
                sed -i "/<alias name=\"aliasPw${username}\"/s|password=\"[^\"]*\"|password=\"{RSA:${rsa_encrypted_password}}\"|" "$xml_file"
              else
                echo "### WARNING ### Unknown encryption method in $xml_file"
              fi

              echo "Updated password in $xml_file"
            else
              echo "File $xml_file does not exist."
            fi
          done
        shell: bash


      - name: Commit changes to SCM
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add .  # Stage all changes
          git commit -m "Updated password for ${{ github.event.inputs.user_name }} in ${{ github.event.inputs.environment }} environment" || echo "No changes to commit"
          # Pull latest changes from the remote branch
          git pull --rebase origin master
          git push origin master  # Push to master branch
