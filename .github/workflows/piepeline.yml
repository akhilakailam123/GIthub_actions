name: Password Update Workflow

on:
  workflow_dispatch:
    inputs:
      password_david:
        description: 'David (New password)'
        required: false
      password_warner:
        description: 'Warner (New password)'
        required: false
      environment:
        description: 'Select environment (prod/int)'
        required: true
        default: 'int'
        options:
          - prod
          - int

permissions:
  contents: write

jobs:
  update-password:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Encrypt and Update Passwords in XML Files
        run: |
          env="int"
          declare -A passwords
          passwords=( ["David"]="newpass" ["Warner"]="" )
          
          set -x  # Enable debugging to trace the script
          
          for username in "${!passwords[@]}"; do
            if [ -n "${passwords[$username]}" ]; then
              echo "Processing password for $username..."
              new_password="${passwords[$username]}"
              
              for cluster_dir in apisec invex; do
                xml_file="$cluster_dir/$env.xml"
                if [ -f "$xml_file" ]; then
                  echo "Processing $xml_file for user $username"
                  
                  # Extract the encryption method
                  encryptionMethod=$(grep -oP "(?<=<alias name=\"aliasPw${username}\" password=\"{)[^:]+(?=:)" "$xml_file")
                  
                  if [[ $encryptionMethod == "AES" ]]; then
                    echo "Detected AES encryption method for $username"
                    aes_encrypted_password=$(echo "$new_password" | openssl enc -aes-256-cbc -a -salt -pbkdf2 -pass pass:mysecretpass) || exit 1
                    sed -i "/<alias name=\"aliasPw${username}\"/s|password=\"[^\"]*\"|password=\"{AES:${aes_encrypted_password}}\"|" "$xml_file" || exit 1
                  
                  elif [[ $encryptionMethod == "RSA" ]]; then
                    echo "Detected RSA encryption method for $username"
                    
                    # Generate RSA key pair on-the-fly for encryption
                    openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048 || exit 1
                    openssl rsa -pubout -in private_key.pem -out public_key.pem || exit 1
                    
                    rsa_encrypted_password=$(echo -n "$new_password" | openssl pkeyutl -encrypt -pubin -inkey public_key.pem | base64 | tr -d '\n') || exit 1
                    sed -i "/<alias name=\"aliasPw${username}\"/s|password=\"[^\"]*\"|password=\"{RSA:${rsa_encrypted_password}}\"|" "$xml_file" || exit 1
                    
                    # Clean up RSA keys
                    rm -f private_key.pem public_key.pem
                  else
                    echo "### WARNING ### Unknown encryption method for $username in $xml_file"
                  fi
                  
                  echo "Updated password in $xml_file"
                else
                  echo "File $xml_file does not exist."
                fi
              done
            fi
          done
          
          set +x  # Disable debugging after script completion

      - name: Commit changes to SCM
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Updated passwords in ${{ github.event.inputs.environment }} environment" || echo "No changes to commit"
          git pull --rebase origin master
          git push origin master
