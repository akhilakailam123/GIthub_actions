name: Password Update Workflow

on:
  workflow_dispatch:
    inputs:
      user_name:
        description: 'Enter username'
        required: true
      environment:
        description: 'Select environment (prod/INT)'
        required: true
        default: 'INT'
        options:
          - prod
          - INT

permissions:
  contents: write

jobs:
  update-password:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Display Inputs
        run: |
          echo "Username: ${{ github.event.inputs.user_name }}"
          echo "Environment: ${{ github.event.inputs.environment }}"

      - name: Simulate Password Encryption
        id: encrypt_password
        run: |
          echo "Simulating password encryption for ${{ github.event.inputs.user_name }}..."
          encrypted_password=$(echo "password" | openssl enc -aes-256-cbc -a -salt -pass pass:mysecretpass)
          echo "Encrypted password: $encrypted_password"
          echo "encrypted_password=$encrypted_password" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Temp File and Update Password for Clusters
        run: |
          mkdir -p "./${{ github.event.inputs.environment }}"

          clusters=("cluster1" "cluster2" "cluster3")
          for cluster in "${clusters[@]}"; do
            xml_file="./${{ github.event.inputs.environment }}/$cluster.xml"
            temp_xml_file="./${{ github.event.inputs.environment }}/$cluster.tmp.xml"
            echo "Creating/Updating temporary file $temp_xml_file"
            
            echo "<cluster>" > "$temp_xml_file"
            echo "  <name>$cluster</name>" >> "$temp_xml_file"
            echo "  <username>${{ github.event.inputs.user_name }}</username>" >> "$temp_xml_file"
            echo "  <encrypted_password>${{ steps.encrypt_password.outputs.encrypted_password }}</encrypted_password>" >> "$temp_xml_file"
            echo "</cluster>" >> "$temp_xml_file"

            if [ -f "$xml_file" ]; then
              echo "Removing old XML file: $xml_file"
              rm "$xml_file"
            fi

            echo "Renaming $temp_xml_file to $xml_file"
            mv "$temp_xml_file" "$xml_file" && echo "Renamed successfully" || echo "Renaming failed"
          done

      - name: Commit changes to SCM
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add . # Stage all changes
          git commit -m "Updated password for ${{ github.event.inputs.user_name }} in ${{ github.event.inputs.environment }} environment"

          # Pull changes from the remote branch with rebase
          git pull --rebase origin ${{ github.event.inputs.environment }}

          # Push changes to the appropriate environment branch
          git push origin HEAD:${{ github.event.inputs.environment }}
